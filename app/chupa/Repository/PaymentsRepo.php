<?php
/**
 * Created by PhpStorm.
 * User: vinnyvinny
 * Date: 10/29/18
 * Time: 5:17 AM
 */

namespace App\chupa\Repository;
use App\chupa\Repository\SMSRepo;
use App\chupa\OAuth\OAuthSignatureMethodHMACSHA1;
use App\chupa\OAuth\OAuthConsumer;
use App\chupa\OAuth\OAuthRequest;
use DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\Session;

class PaymentsRepo
{

    public static function init()
    {
        return new self;
    }

    public function cartContent()
    {
        $cart = DB::table('customers_basket')
            ->join('products', 'products.products_id', '=', 'customers_basket.products_id')
            ->join('products_description', 'products_description.products_id', '=', 'products.products_id')
            ->select('customers_basket.*', 'products.products_model as model', 'products.products_image as image', 'products_description.products_name as products_name', 'products.products_quantity as quantity', 'products.products_price as price', 'products.products_weight as weight', 'products.products_weight_unit as unit')
            ->where('customers_basket.is_order', '=', '0')->where('products_description.language_id', '=', Session::get('language_id'));
        if (empty(session('customers_id'))) {
            $cart->where('customers_basket.session_id', '=', Session::getId());
        } else {
            $cart->where('customers_basket.customers_id', '=', session('customers_id'));
        }

        $cart_data = $cart->get();
        return $cart_data;
    }

    public function payment($payments)
    {//initiates payment

        $total = 0;
        $cart_info=[];
        foreach ($payments as $pt) {
            $total += $pt->final_price;

        }
        $now=Carbon::now();
        $customer = DB::table('customers')->where('customers_id', $pt->customers_id)->orderBy('customers_id', 'DESC')->first();
        $id = DB::table('transactions')->insertGetId(['status' => 'NEW', 'reference' => mt_rand(10, 100), 'amount' => $total, 'currency' => 'KES',
            'customer_id' => $customer->customers_id,'created_at'=>$now,'updated_at'=>$now]);
        $ref = DB::table('transactions')->where('id', $id)->first();

        SMSRepo::init()->sendSms($total,$customer);
        $token = $params = NULL;
        /*
        PesaPal Sandbox is at https://demo.pesapal.com. Use this to test your developement and
        when you are ready to go live change to https://www.pesapal.com.
        */
        $consumer_key = config('pesapal.consumer_key');//Register a merchant account on
//demo.pesapal.com and use the merchant key for testing.
//When you are ready to go live make sure you change the key to the live account
//registered on www.pesapal.com!
        $consumer_secret = config('pesapal.consumer_secret');// Use the secret from your test
//account on demo.pesapal.com. When you are ready to go live make sure you

//change the secret to the live account registered on www.pesapal.com!
        $signature_method = new OAuthSignatureMethodHMACSHA1();
        $iframelink = 'https://demo.pesapal.com/api/PostPesapalDirectOrderV4';//change to
//https://www.pesapal.com/API/PostPesapalDirectOrderV4 when you are ready to go live!

//get form details
        $amount = $total;
        $amount = number_format($amount, 2);//format amount to 2 decimal places

        $desc = 'Initial transaction';
        $type = 'MERCHANT'; //default value = MERCHANT
        $reference = $ref->reference;//unique order id of the transaction, generated by merchant
        $first_name = $customer->customers_firstname;
        $last_name = $customer->customers_lastname;
        $email = $customer->email;
        $phonenumber = $customer->customers_telephone;//ONE of email or phonenumber is required
        $currency = 'KES';

        $callback_url = "http://localhost:8000/complete-checkout"; //redirect url, the page that will handle the response from pespesapalpesapalapal.

        $post_xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<PesapalDirectOrderInfo 
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 
xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" 
Amount=\"" . $amount . "\" 
Currency=\"" . $currency . "\" 
Description=\"" . $desc . "\" 
Type=\"" . $type . "\" 
Reference=\"" . $reference . "\" 
FirstName=\"" . $first_name . "\" 
LastName=\"" . $last_name . "\" 
Email=\"" . $email . "\" 
PhoneNumber=\"" . $phonenumber . "\" 
xmlns=\"http://www.pesapal.com\" />";

        $post_xml = htmlentities($post_xml);
        $consumer = new OAuthConsumer($consumer_key, $consumer_secret);

//post transaction to pesapal
        $iframe_src = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $iframelink, $params);
        $iframe_src->set_parameter("oauth_callback", $callback_url);
        $iframe_src->set_parameter("pesapal_request_data", $post_xml);
        $iframe_src->sign_request($signature_method, $consumer, $token);
        return view('pays.load-pesa')->with('iframe_src', $iframe_src);
    }

}

